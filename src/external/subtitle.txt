WEBVTT
Kind: captions
Language: en

00:00:05.160 --> 00:00:06.960
Welcome to the File Writing Challenge.

00:00:08.040 --> 00:00:12.780
In this challenge, you'll be creating your own
data file, with the Student Engagement records.

00:00:13.620 --> 00:00:16.860
In this case, you'll be outputting
the data in Jayson format.

00:00:17.760 --> 00:00:22.980
You've seen a little JSON in a previous lecture.
It stands for JavaScript Object Notation,

00:00:22.980 --> 00:00:26.280
and it's a pretty popular
lightweight data interchange format.

00:00:27.180 --> 00:00:31.560
If you want a quick introduction, a good
place to start is the w3schools site,

00:00:31.560 --> 00:00:35.640
which I'm showing on this slide.
Don't worry though, because you

00:00:35.640 --> 00:00:38.520
don't really have to know much about
Jayson, to complete this challenge.

00:00:40.620 --> 00:00:45.840
Start with the Student Engagement code from the
previous videos, and first generate 1000 students.

00:00:46.800 --> 00:00:51.420
To output each student as a JSON record:
You can use the write, or writeString methods

00:00:51.420 --> 00:00:57.480
on Files. Or you can try FileWriter, PrintWriter
or BufferedWriter, or some combination of these.

00:00:58.380 --> 00:01:02.460
The text printed should be a list of
students, a conceptual look is shown here.

00:01:03.420 --> 00:01:06.720
The entire set of student records
should be contained in square brackets,

00:01:06.720 --> 00:01:09.540
which is Jaysons representation
for an array of elements.

00:01:10.440 --> 00:01:13.320
Each student record should
be enclosed in curly braces,

00:01:13.320 --> 00:01:18.720
containing student data in key value pairs, and
separated by commas, which I'll show you next.

00:01:20.520 --> 00:01:24.600
At a minimum, print the student
id, and some demographics data.

00:01:25.320 --> 00:01:28.920
The Jayson example on this slide,
demonstrates a flattened structure.

00:01:29.760 --> 00:01:33.900
You can see all fields are key value pairs,
and all are children of the student record.

00:01:34.980 --> 00:01:38.640
Keys are enclosed in quotes, as
are values if they're text based,

00:01:38.640 --> 00:01:41.100
and the colon is used to
separate the key and value.

00:01:43.020 --> 00:01:47.400
On this slide, I'm showing a more hierarchical
Jayson structure, for a single student.

00:01:48.480 --> 00:01:52.541
The demographics key, has a value
that's an object and not a simple string,

00:01:52.541 --> 00:01:57.840
and that's enclosed in curly braces.
The engagement key's values is also an array,

00:01:57.840 --> 00:02:00.314
containing separate engagement records.


00:02:02.288 --> 00:02:05.794
You might want to explore the use ofIntelliJ's template functionality,

00:02:05.794 --> 00:02:07.925
to create your own JSON string template.

00:02:08.880 --> 00:02:11.640
You could start with one of the
toString templates as a basis.

00:02:12.660 --> 00:02:15.300
I've included IntelliJ's
help link on that subject.

00:02:16.380 --> 00:02:20.940
It's a little off topic, but you might find it
useful for this and other similar challenges.

00:02:21.960 --> 00:02:25.680
If this is something you want to explore,
go ahead and give that a try on your own,

00:02:25.680 --> 00:02:29.520
or watch the first few minutes of
my solution, then pause afterwards.

00:02:30.360 --> 00:02:32.579
Don't forget about the StringJoiner class,

00:02:32.579 --> 00:02:35.940
that lets you define a delimiter,
as well as a prefix and suffix.

00:02:37.080 --> 00:02:39.840
Start out by testing 2 or 3
students in your data set.

00:02:40.800 --> 00:02:44.340
Ok, so go away and have a go at that,
and see what you can come up with.

00:02:45.420 --> 00:02:48.780
When you're ready, come back, and we'll
walk through my solution together.

00:02:51.840 --> 00:02:56.040
I'm going to complete this challenge in the same
project I've been using, the WritingFiles project.

00:02:57.180 --> 00:03:00.960
The first thing I want to do is, show you
how to create your own to String template.

00:03:01.920 --> 00:03:06.540
I'll start in the StudentDemographics record,
with my pointer just below the two String method.

00:03:07.320 --> 00:03:11.640
I'll press alt Insert, or you could select
Code from the file menu, then generate.

00:03:12.960 --> 00:03:15.660
Either way, select the two String
method as the item to generate.

00:03:16.560 --> 00:03:19.980
All the fields in the dialog window,
should be selected by default.

00:03:20.940 --> 00:03:24.840
Here, next to the Template select
list, is a button, Settings.

00:03:26.040 --> 00:03:28.800
I'll select that.
On this window,

00:03:28.800 --> 00:03:34.020
I want to select the Templates tab,
Here, on the left, I can see the

00:03:34.020 --> 00:03:38.280
list of existing templates, each generates
the two String method, in different ways.

00:03:39.240 --> 00:03:44.040
You may have a different list of templates.
I'll select the StringJoiner template.

00:03:45.000 --> 00:03:50.220
The template code is displayed on the right.
This code uses a combination of Java,

00:03:50.220 --> 00:03:54.480
and a scripting language used by the IDE,
called the Velocity Template Language.

00:03:55.620 --> 00:03:58.800
What I'll do next, is make a
copy of this coding template.

00:03:59.760 --> 00:04:02.940
I can select the copy icon,
at the top of the left pane.

00:04:03.900 --> 00:04:08.640
This prompts for a new template name.
I'll call it JsonBuilder, with String

00:04:08.640 --> 00:04:11.283
Joiner in parentheses, and I'll click OK.

00:04:12.411 --> 00:04:16.337
This code uses StringJoiner, so all fields are separated by the delimiter,

00:04:16.337 --> 00:04:18.900
declared as the first argument, a comma.

00:04:19.680 --> 00:04:22.860
The prefix is the second argument
to the StringJoiner constructor.

00:04:23.760 --> 00:04:26.280
Here you see, the dollar sign classname.

00:04:27.000 --> 00:04:30.120
The two hash signs just mean the
statement is continued on the next line.

00:04:31.140 --> 00:04:35.340
Then the dot class dot getSimple Name, and
that's appended to an opening square bracket.

00:04:36.180 --> 00:04:38.700
All of this code just outputs
the simple class name.

00:04:39.660 --> 00:04:42.420
I don't really want this in my
output, so I'll remove all of this

00:04:43.380 --> 00:04:45.900
I'll change the square brackets to curly braces

00:04:48.060 --> 00:04:52.920
Next, this code loops through all the class
members, here you can see a foreach statement.

00:04:53.820 --> 00:04:58.620
This is followed by an if statement.
This statement is saying, if it's not a

00:04:58.620 --> 00:05:02.820
static member, it will add information about
this field, to the String joiner instance.

00:05:03.840 --> 00:05:06.480
First it will add the field
name followed by an equals sign.

00:05:07.560 --> 00:05:11.940
In Jayson, field names are the keys, and
the keys should be wrapped in double quotes.

00:05:13.260 --> 00:05:15.540
This means I want to add a backslash double quote,

00:05:15.540 --> 00:05:19.500
after the first double quote there.
I'll also add a back slash

00:05:19.500 --> 00:05:23.280
after the dot name there.
That equals sign needs to be a colon,

00:05:23.280 --> 00:05:25.505
for Jayson, so I'll change that.

00:05:26.893 --> 00:05:30.000
I'll skip over the if statement for
a primitive array or object array,

00:05:30.000 --> 00:05:31.500
and go down to the next else if.

00:05:32.520 --> 00:05:35.940
If this field is a string, the code
will wrap the value in single quotes.

00:05:37.140 --> 00:05:42.480
Here, I want to change the single quotes,
to back slash double quotes, in both cases.

00:05:44.220 --> 00:05:48.540
Finally, for good measure, I'll go up and
change the name from two String to JSON.

00:05:49.500 --> 00:05:54.420
I'll click OK to save this.
It's now selected in my template drop down.

00:05:55.380 --> 00:06:00.480
In the bottom left corner of this dialog, I want
to uncheck Insert ampersand Override, because in

00:06:00.480 --> 00:06:04.620
this case I'm not overriding any method.
I can press OK after that.

00:06:07.140 --> 00:06:10.380
This inserts the new two Jayson method
in the StudentDemographics code.

00:06:11.340 --> 00:06:14.040
The benefit of this exercise
isn't totally apparent,

00:06:14.040 --> 00:06:16.680
unless we use this template
more than a couple of times.

00:06:17.820 --> 00:06:21.240
I'll go over to my Student class
next, and find it's two string method.

00:06:26.340 --> 00:06:28.560
Underneath that I'll generate
the two String method,

00:06:28.560 --> 00:06:30.960
but select the Jayson Builder template here.

00:06:31.860 --> 00:06:35.160
I'll make sure to uncheck the insert
Override checkbox before I hit OK.

00:06:37.080 --> 00:06:39.600
And that gives me a two JSON
method in the Student class.

00:06:40.740 --> 00:06:44.820
I'm going to comment out the two add statements
for coursesEnrolled and EngagementMap right now.

00:06:45.720 --> 00:06:47.040
Finally for the demographics,

00:06:47.040 --> 00:06:50.340
I really want to pass the result of
the two JSON method on that class.

00:06:51.480 --> 00:06:56.040
To see if this works, I'll create a new class
called Challenge in the dev.lpa package.

00:07:05.040 --> 00:07:09.060
I'll go to the Main class, and copy the
code that creates my list of students.

00:07:10.080 --> 00:07:13.680
I don't want the header, so starting
at the declaration of the jmc course,

00:07:13.680 --> 00:07:15.360
through the two List operation.

00:07:16.380 --> 00:07:18.900
I'll paste that in the main
method of my Challenge class.

00:07:19.980 --> 00:07:24.180
I'll change 25 to just 2 in the limit operation
for now, while I'm testing out my code.

00:07:25.260 --> 00:07:28.440
Next, I'm going to change my List
of Students to a List of Strings.

00:07:30.960 --> 00:07:33.240
That's because, I'll insert a map operation,

00:07:33.240 --> 00:07:37.680
that will take a student, mapping it to
a string, using the two Jayson method.

00:07:38.580 --> 00:07:40.484
I can do that with a method reference.

00:07:41.590 --> 00:07:42.701
And I'll run this now.

00:07:47.400 --> 00:07:51.960
And whoops, I forgot to add code to print out
the result, so let me add that now and re-run.

00:07:52.860 --> 00:07:55.440
I'll print each element in this
list to the console to start.

00:07:56.580 --> 00:07:57.420
Running this,

00:07:59.280 --> 00:08:01.920
And maybe that's right, but
it's kind of hard to tell.

00:08:02.940 --> 00:08:07.080
I'll copy the last student record in my
console, and I'll pull up a JSON linter.

00:08:08.700 --> 00:08:12.360
A linter is a software development
tool, that will analyze source code

00:08:12.360 --> 00:08:17.640
for potential errors, and styling issues.
I'm showing a link of a popular one here.

00:08:18.600 --> 00:08:24.720
These tools enable you to paste text into a text
area, and both nicely format, as well as validate,

00:08:24.720 --> 00:08:28.500
that the text is well formed.
I'll open that link up now.

00:08:35.100 --> 00:08:38.280
I can paste my clipboard text,
right into this text area.

00:08:39.300 --> 00:08:42.180
I can press the validate button
which is below this text block.

00:08:44.460 --> 00:08:45.840
This formats the JSON,

00:08:47.460 --> 00:08:50.880
and validates it, the results are
shown below the validate button.

00:08:51.720 --> 00:08:54.420
Now I know I've created Valid
JSON for this one student record.

00:08:55.560 --> 00:09:00.300
OK, so that's all good.
This video is getting long, and I still haven't

00:09:00.300 --> 00:09:05.520
written a single character to an output file yet.
Luckily, this part is pretty easy.

00:09:06.480 --> 00:09:10.560
I'll be doing this with Files dot
writeString, passing it one very large string.

00:09:11.340 --> 00:09:12.480
How do I do this?

00:09:13.440 --> 00:09:17.040
Getting back to the Challenge code,
I'll first change my stream pipeline.

00:09:18.000 --> 00:09:23.820
I'll make the result a String, and not a list.
Next, I'll remove both the two List statement,

00:09:23.820 --> 00:09:27.060
and that last statement, that
prints each student json record.

00:09:28.140 --> 00:09:31.560
Instead of two List, I want to use
the collect terminal operation.

00:09:32.640 --> 00:09:36.540
I can use Collectors.joining which uses
a StringJoiner underneath the covers.

00:09:37.440 --> 00:09:44.040
The first argument is the delimiter. I'll make
that a comma. The next argument is a prefix which

00:09:44.040 --> 00:09:49.519
for this array of students, needs to be an opening
square bracket, and my suffix is a closing square bracket.

00:09:50.408 --> 00:09:55.500
I'll print this to the console as well.
There's actually one more change I want to make,

00:09:55.500 --> 00:09:57.900
to help with the readability
of the output a little bit.

00:09:58.800 --> 00:10:03.060
I want to make my delimiter, between
students, also include a line separator.

00:10:04.020 --> 00:10:07.980
I'll set up a local variable called
delimiter, and set that to a comma,

00:10:07.980 --> 00:10:12.720
plus the System.lineSeparator.
I'll pass that variable as the

00:10:12.720 --> 00:10:17.700
first argument, instead of just a comma.
Ok, now it's time to write that out to a file.

00:10:18.480 --> 00:10:24.000
I'll start with a try block. I'll call
Files.writeString, passing it a new Path,

00:10:24.000 --> 00:10:28.080
for a file names students.json,
and I'll pass my students string.

00:10:28.980 --> 00:10:34.260
I'll catch the IOException. And just wrap
that in a runtime exception and throw it.

00:10:35.580 --> 00:10:39.120
I'll run this, again with
just 2 records, to test it.

00:10:39.900 --> 00:10:44.940
I'll see my students printed in the console.
Notice that I have an opening square bracket

00:10:46.140 --> 00:10:49.980
and ending square bracket, and at the end
of the first student, there's a comma.

00:10:50.700 --> 00:10:53.065
This is what the Collectors.joining did.

00:10:56.102 --> 00:10:59.230
But I also see students.json listed in my
project panel,

00:10:59.230 --> 00:11:01.320
 at the project root, and I can open that up.

00:11:03.480 --> 00:11:06.840
There you can see my students json
code, as it was in the console.

00:11:07.800 --> 00:11:11.880
I'll copy the entire contents of that file,
and again test it in the Jayson linter.

00:11:13.740 --> 00:11:16.200
I'll paste the contents of
my file into the text window.

00:11:17.220 --> 00:11:19.740
I'll scroll down and hit the
validate JSON button again.

00:11:22.200 --> 00:11:24.110
I can see my text gets formatted,

00:11:25.412 --> 00:11:28.063
and it's valid JSON for this array of two students.

00:11:29.820 --> 00:11:33.904
Getting back to my code, I can
change my number of students to 1000.

00:11:35.314 --> 00:11:37.755
I'll re-run it, and examine
that output file again.

00:11:41.880 --> 00:11:46.020
You can see this code had no trouble writing
1000 records to the file, and console.

00:11:49.260 --> 00:11:52.860
I'll quick go to the Course record,
and add the two Jayson method to it.

00:12:02.640 --> 00:12:04.320
I'll go to the CourseEngagement class,

00:12:07.740 --> 00:12:12.000
and do the exact same thing, again right
under the existing two String method.

00:12:17.580 --> 00:12:21.300
Ok, so that was easy.
I want to get back to

00:12:21.300 --> 00:12:26.640
the Student class, and the two JSON method.
Because the coursesEnrolled and engagementMap

00:12:26.640 --> 00:12:30.180
types are part of collections, I
need to create a json array for each.

00:12:31.080 --> 00:12:36.420
I'll show you two ways to do this.
The first, is just to use the StringJoiner class.

00:12:37.620 --> 00:12:43.020
I'll set up a local variable, a String Joiner
type called courses, and create a new instance,

00:12:43.020 --> 00:12:47.820
with a delimiter of comma. The prefix
and suffix will be square brackets.

00:12:48.780 --> 00:12:50.395
I'll loop through coursesEnrolled.

00:12:51.914 --> 00:12:54.218
And add each courses JSON to the StringJoiner.

00:12:56.160 --> 00:13:02.280
for the engagement map, I'll use a stream, on its
values. I'll map to the CourseEngagement JSON.

00:13:03.600 --> 00:13:08.220
Like I did in the Challenge's main method, I'll
collect the strings using Collectors.joining,

00:13:08.220 --> 00:13:11.760
with a comma, and square brackets
again for the prefix and suffix.

00:13:13.140 --> 00:13:17.220
Finally I'll uncomment the two adds
I have commented out below, changing

00:13:17.220 --> 00:13:21.480
coursesEnrolled as the variable to courses,
and I'll change engagementMap to engagement.

00:13:22.980 --> 00:13:24.180
I'll re-run the code.

00:13:29.400 --> 00:13:33.240
Again, it's rather hard to see
it, in this students.json file

00:13:34.320 --> 00:13:38.820
I'll copy that last statement.
I'll pop back over to the JSON Lint site.

00:13:39.660 --> 00:13:43.620
I can use the clear button to erase
that text area, using the clear button.

00:13:44.580 --> 00:13:48.420
I'll paste my Jayson in there.
Since I grabbed the last row,

00:13:48.420 --> 00:13:52.020
there's an extra ending square bracket at
the end of this line, so I'll remove it.

00:13:53.280 --> 00:13:57.660
I'll hit the validate button.
It formats it and tells me I have valid JSON.

00:13:59.820 --> 00:14:02.820
Now, look at this formatted
JSON for the 1000th student.

00:14:03.720 --> 00:14:07.320
You can see I now have coursesEnrolled,
and that's an array of two courses.

00:14:09.540 --> 00:14:12.780
I have engagementMap, and array
of two engagement records.

00:14:13.740 --> 00:14:17.580
Ok, so how'd you do?
I didn't really expect you to

00:14:17.580 --> 00:14:22.500
play too much with the two string templates.
I did however, want to let you know that

00:14:22.500 --> 00:14:25.920
feature existed, if you ever want to
customize string functions that way.

00:14:26.880 --> 00:14:32.760
Without it, editing JSON can be tedious.
As I said, there are some popular external

00:14:32.760 --> 00:14:35.280
libraries, that will also help
you do this kind of thing.

00:14:36.180 --> 00:14:39.759
This code gave me the opportunity to
review the StringJoiner class with you,

00:14:39.759 --> 00:14:41.732
and how to use it with and without streams.

00:14:42.556 --> 00:14:45.540
Now you've read data from,
and written data to, a file.

00:14:46.560 --> 00:14:51.480
Next, I want to talk to you about transferring
between files, and cover a few loose ends.

00:14:52.320 --> 00:14:55.320
Afterwards, I'll launch into
slightly more advanced topics,

00:14:55.320 --> 00:14:56.880
so I'll see you in that next video.
