WEBVTT
Kind: captions
Language: en

00:00:05.320 --> 00:00:10.200
In the last video, we talked about what
JDBC is, and downloaded the My SQL's

00:00:10.200 --> 00:00:16.320
driver for Java, called Connector slash J.
This is a jar file, which contains all the

00:00:16.320 --> 00:00:21.324
packaged classes needed to connect and
execute queries, on a MySQL database.


00:00:22.160 --> 00:00:26.680
I've created a new project, calling it
MySQLMusic, with the usual main class

00:00:26.680 --> 00:00:32.000
and method, in the dev lpa package.
Before I do anything else, I need to

00:00:32.000 --> 00:00:37.560
include the code in that jar file in my project.
So with the project panel open, I can select my

00:00:37.560 --> 00:00:39.572
project root, and from the menu,


00:00:39.572 --> 00:00:43.711
I'll select Open Module Settings, or F 4 if you're on windows.


00:00:45.285 --> 00:00:51.320
On the left pane of this dialog,I'll select Libraries.
I'll click the + sign at the top of the panel,

00:00:51.320 --> 00:00:55.504
that says Nothing to show.
Here, you have two choices.


00:00:56.417 --> 00:01:00.172
You can get a Java library by selecting
a jar file from an accessible drive,


00:01:01.160 --> 00:01:05.000
or if you've got Maven installed, you can
download this from the Maven Repository.


00:01:05.880 --> 00:01:09.725
I'll show you this first, then we'll
remove it, and add the jar we downloaded.


00:01:10.600 --> 00:01:14.623
To find this driver, I can type in com.mysql
in the dialog there,

00:01:14.623 --> 00:01:16.595
and pick the search icon to the right of that.


00:01:18.947 --> 00:01:22.072
This displays the different versions of the drivers available on Maven.



00:01:23.063 --> 00:01:24.869
You can just pick the latest version there.

00:01:28.000 --> 00:01:32.480
Here you can see it's giving me the information
that the mysql connector.j, will be added to

00:01:32.480 --> 00:01:36.313
the MySQLMusic module.
So I'll hit Ok there.


00:01:37.440 --> 00:01:40.586
And you can see that a couple of jars
are now in the Classes folder here.


00:01:41.480 --> 00:01:45.923
If you're already comfortable using maven,
and modules, feel free to go with this.


00:01:46.720 --> 00:01:49.225
I'll be talking about Maven
in an upcoming section.


00:01:50.080 --> 00:01:55.603
Now I'll remove this, and simply add the jar.
So I'll click on that module in the second pane.


00:01:56.400 --> 00:02:00.440
And I'll click the minus sign.
And select OK to the prompt that asks

00:02:00.440 --> 00:02:05.000
if I want to remove that library.
I'll pick the plus sign again,

00:02:05.000 --> 00:02:09.200
and this time I'll choose Java.
This brings up the file dialog,

00:02:09.200 --> 00:02:13.163
so I'll go to the jar, where I extracted
it in the last video, and select it.


00:02:24.320 --> 00:02:29.880
And now I've got my jar as a library.
Selecting Ok, I can close this window, and

00:02:29.880 --> 00:02:35.400
we're now ready to connect to our music database.
But even before we do that, I think I should talk

00:02:35.400 --> 00:02:40.040
a little about usernames and passwords.
One thing you really never want to do,

00:02:40.040 --> 00:02:45.000
is put this information in your source code.
This leaves you with a few other options,

00:02:45.000 --> 00:02:48.560
such as putting it in a properties
file, or a configuration file,

00:02:48.560 --> 00:02:53.360
or soliciting the data from the user.
In a server environment, the connection

00:02:53.360 --> 00:02:57.520
and connection details, would be configured
as part of the Datasource, but we won't

00:02:57.520 --> 00:03:02.800
be testing in that kind of environment.
So rather than encourage bad habits, for now,

00:03:02.800 --> 00:03:07.600
I think we'll prompt a user for the data.
If we use a Scanner with System.in,

00:03:07.600 --> 00:03:11.547
to get the information from the console,
we don't have a way to mask the password.


00:03:12.480 --> 00:03:17.140
That leaves us with Console, which
we learned early on in the course, doesn't work from the IDE.

00:03:18.190 --> 00:03:20.874
Since we haven't covered a lot ofUser Interface options yet,

00:03:20.874 --> 00:03:24.425
except for a Swing dialog, I'll just go with two swing prompts.


00:03:25.280 --> 00:03:29.240
I'll set these up in the main method.
I'll create a local variable that'll

00:03:29.240 --> 00:03:35.320
get populated by calling showInputDialog on a
JOptionPane. This takes a parent component which

00:03:35.320 --> 00:03:41.080
would normally be the parent page for example.
Here, I'll just pass null, since we're using this

00:03:41.080 --> 00:03:46.691
outside of a true user interface application.
And the prompt will say Enter DB Username.


00:03:47.760 --> 00:03:50.587
I'll use a different method on
the JOptionPane for the password.


00:03:51.520 --> 00:03:54.846
In this case, I'll first create
a special type of variable.


00:03:55.760 --> 00:04:02.328
This is a swing class, JPasswordField, that will
mask the input. Instead of showInputDialog,

00:04:02.425 --> 00:04:09.040
I'll call showConfirmDialog, which is similar, but in
this case, I can pass my password field instance,

00:04:09.040 --> 00:04:15.000
as the second argument. The prompt will be Enter
DB Password, and the user can choose OK or the

00:04:15.000 --> 00:04:20.520
cancel option in this case. I want my password to
be an array of characters, which I'll explain in

00:04:20.520 --> 00:04:26.760
a minute, and I'll make that final. If the user
entered OK, then I'll get the password, from the

00:04:26.760 --> 00:04:32.240
pf variable, otherwise I'll set it to null;
The getPassword method,

00:04:32.240 --> 00:04:37.720
returns a character array, and not a string.
This is because a string might get interned,

00:04:37.720 --> 00:04:42.406
and this password, if it were a string, could
inadvertently be stored on the String pool.


00:04:43.320 --> 00:04:46.947
A memory dump in any case, could
reveal the user's password.


00:04:47.880 --> 00:04:52.345
It's best practice to encrypt or hash the
password, but I won't include that code here.


00:04:53.200 --> 00:04:58.285
In most cases, as I've said, this information
will hopefully be securely stored on a server.


00:04:59.160 --> 00:05:01.754
I just wanted you to be aware
of a few of these issues.


00:05:02.706 --> 00:05:05.468
Ok, so now it's time to
actually make a connection.


00:05:06.440 --> 00:05:09.726
First, I'll set up a static string
for what's called the connection url.


00:05:10.640 --> 00:05:14.440
This is a string which uniquely describes
how, and what you're connecting to,

00:05:14.440 --> 00:05:19.920
and it's determined by the database vendor.
I'll make this private final static, a string

00:05:19.920 --> 00:05:26.640
called CONN_String, short for connection string.
For my sql, this will always start with jdbc

00:05:26.640 --> 00:05:31.704
colon, my sql colon, then it will be followed
by colon, two slashes, and hostname,

00:05:31.704 --> 00:05:33.320
where we can reach the database.


00:05:38.646 --> 00:05:42.376
Next, we have another
slash and then the database name. So music.

00:05:44.360 --> 00:05:48.679
Depending on what database vendor you're using,
your connection string may be a little different.


00:05:50.720 --> 00:05:54.240
On this slide, I'm showing you a
few of the more common databases,

00:05:54.240 --> 00:05:58.244
and what a basic connection string might
look like if the database was named music.


00:05:59.080 --> 00:06:04.326
You can see that some of the details,
after the jdbc: vendor part, may vary.


00:06:05.240 --> 00:06:11.000
Postgres and MySQL are similar, but Oracle,
in this example, includes anat sign,

00:06:11.000 --> 00:06:16.480
before the host, and Microsoft SqlServer,
has a semi colon after it's port, so be

00:06:16.480 --> 00:06:19.727
sure you understand the right connection
string you need to use for your vendor.


00:06:22.079 --> 00:06:25.167
So we use the connection string
as input, to get a connection.


00:06:26.119 --> 00:06:29.400
As I mentioned in the previous video,
there's two methods to do this.


00:06:30.520 --> 00:06:35.720
The first is with the DriverManager class.
Like opening a file, you'll want to open a

00:06:35.720 --> 00:06:41.160
connection in a try with resources block.
Inside the try parentheses, I'll set up a

00:06:41.160 --> 00:06:46.240
Connection variable, calling it simply connection,
and calling a static method on the DriverManager

00:06:46.240 --> 00:06:48.084
class, named getConnection.

00:06:49.075 --> 00:06:52.914
This method takes the connection string,
and optionally the username and password.

00:06:54.070 --> 00:06:58.111
Here, I'll turn my character array into
a string, within the call to the method.

00:06:59.414 --> 00:07:04.159
If we get here, then we've successfully connected to the
database, and I'll print that message.

00:07:05.209 --> 00:07:10.000
Another best practice, once you've used the password for
whatever you need it for, you should reset the

00:07:10.000 --> 00:07:13.950
characters, so the password is only in memory
for the shortest time possible.

00:07:15.097 --> 00:07:23.040
Here, I'll set the password to all spaces. I'll catch any
SQLException that's thrown. If there's a problem,

00:07:23.040 --> 00:07:28.219
I'll re-throw a runtime exception.
I don't have to close the connection,

00:07:28.219 --> 00:07:32.767
because I've created it (and implicitly
opened it) in this try with resources code.


00:07:33.720 --> 00:07:36.914
The connection will get automatically
closed when this code completes.


00:07:37.866 --> 00:07:39.554
Ok, so let's run this.


00:07:43.091 --> 00:07:44.936
I'll enter dev user in the first prompt,

00:07:44.936 --> 00:07:48.947
as you'll want to do, if you followed
along with the MySQL WorkBench video.


00:07:50.443 --> 00:07:55.280
Next, I'll get prompted for the password.
You'll want to enter your own password,

00:07:55.280 --> 00:08:00.920
that you set up for this user, in this field.
Notice that I can't see the password, because

00:08:00.920 --> 00:08:05.960
I used the swing JPasswordField.
My application will print Success,

00:08:05.960 --> 00:08:10.720
Connection made to the music database.
So now, we're successfully connecting to

00:08:10.720 --> 00:08:15.649
the MySQL database from a Java application,
using the DriverManager class to do it.


00:08:16.640 --> 00:08:20.388
Before we do anything else, I'll show
you how to connect using a Datasource.


00:08:21.360 --> 00:08:25.227
Before the try with resources statement,
I'll add a couple of lines of code.


00:08:26.160 --> 00:08:31.000
The first statement will create a variable,
using type inference, called dataSource,

00:08:31.000 --> 00:08:36.208
and I'll set that to a new mySQLDataSource,
which is My SQL's implementation of this type.


00:08:37.160 --> 00:08:39.325
This constructor doesn't have any arguments.

00:08:40.258 --> 00:08:43.748
SoI set the connection string by called setURL on that object.


00:08:45.244 --> 00:08:51.840
In this case,I've created a basic DataSourceimplementation.
This will produce a standard connection object,

00:08:51.840 --> 00:08:55.080
much like I'd get with the Driver
Manager, so it won't be pooled,

00:08:55.080 --> 00:08:59.600
or used in a distributed transaction.
If you're working in a multi-tiered

00:08:59.600 --> 00:09:03.544
production environment, your client would
get a datasource instance a different way.


00:09:04.515 --> 00:09:10.360
You'd use something called a JNDI naming service.
I'll be talking about this service, when I cover

00:09:10.360 --> 00:09:13.224
client server applications
a bit later in the course.


00:09:14.195 --> 00:09:17.240
When you get a datasource through
JNDI, you wouldn't need to specify

00:09:17.240 --> 00:09:22.785
the URL or the username and password.
Let's now get a connection using this datasource.


00:09:23.640 --> 00:09:28.206
First I'll comment out the first part of the
try with resources, so the first two lines.


00:09:29.840 --> 00:09:34.009
After this I'll add a try with resources,
but get the connection with the data source.


00:09:35.000 --> 00:09:37.920
This starts out the same as
before, but this time I'll call

00:09:37.920 --> 00:09:40.000
getConnection on the datasource variable.



00:09:41.885 --> 00:09:43.885
This code compiles, but if we run it,

00:09:51.880 --> 00:09:55.840
I get an error, because I didn't pass the
username or password that was supplied by

00:09:55.840 --> 00:09:59.811
the user, to the datasource's get
connection method, so this fails.


00:10:00.880 --> 00:10:05.840
Again, if I had gotten the datasource instance
from the naming context or JNDI, I could use this

00:10:05.840 --> 00:10:10.680
getConnection method with no arguments.
But since I'm using a basic datasource,

00:10:10.680 --> 00:10:15.386
I do have to pass the user name and password I
get, from the swing inputs, so I'll do that now.


00:10:16.280 --> 00:10:19.085
I'll pass the username, and
the password as a string.


00:10:20.640 --> 00:10:22.288
And rerunning this code,



00:10:28.391 --> 00:10:30.002
I've now got my success message.

00:10:30.840 --> 00:10:35.348
I could also have used the setUser and
setPassword methods, as I did with setURL.


00:10:36.320 --> 00:10:40.640
In fact, I can use datasource without a
connection string at all, by using the set

00:10:40.640 --> 00:10:44.042
methods on this class.
Let's do this.


00:10:44.917 --> 00:10:50.652
I'll comment out the setURL method.
Now, I'll start typing dataSource.set


00:10:51.800 --> 00:10:55.045
Take a minute to scroll through the
set methods available on this class.


00:10:55.920 --> 00:10:59.040
It wouldn't be an understatement to
say, there's a lot of options here.


00:10:59.960 --> 00:11:03.880
We'll just focus on the basics.
I'll pick setServerName from

00:11:03.880 --> 00:11:11.073
the list, and pass that localhost.
I'll next setPort, to 3 3 0 6.

00:11:12.083 --> 00:11:14.033
And I'll set the database name to music.


00:11:16.501 --> 00:11:19.116
I'll run this code, and enter the user and password,



00:11:26.444 --> 00:11:27.783
and I get the same result.

00:11:29.360 --> 00:11:32.600
I'm not going to get into all the
complexities of the datasource type,

00:11:32.600 --> 00:11:37.320
in this introduction to the subject.
In this case, there's not much difference

00:11:37.320 --> 00:11:41.546
between these two methods, since both
connection types are basic connections.


00:11:42.440 --> 00:11:46.146
But Datasource is newer, and generally
preferred over DriverManager.


00:11:47.040 --> 00:11:50.920
Datasource should definitely be used in
a multi tiered environment, that requires

00:11:50.920 --> 00:11:57.320
connection pooling or distributed transactions.
Ok, so now that we can connect, it's time to do

00:11:57.320 --> 00:12:02.240
some of the fun work, which is getting data from
the database, so let's move on to the next video.
